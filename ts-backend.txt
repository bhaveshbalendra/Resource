install
npm init -y 
tsc --init (when typescript install globally)
or
npx tsc --init (when typescript install locally)

npm install @types/node


start 
tsc app.ts node app.js
ts-node app.ts
nodemon app.ts (server)
npm start

npm run build or npx build

"scripts": {
    "start": "node dist/index.js",
    "dev": "ts-node-dev --respawn --transpile-only --files src/index.ts",
    "build": "npm install && tsc"
  },

//tsc index.ts -> tsc index only one compile if index.ts all at once
//node index

 if intlisens not working in command pellet restart the typescript server
 type script wont run in node index.ts because by default it uses es module and node uses common js module

//tsc config file
// //@ts-check
// tsc --init -> create tsconfig.json file uncomment the "noEmitOnError":true
// or in command tsc --noEmitOnError index.ts
// tsc -watch or tsc -w or npx tsc -w (if TypeScript is installed locally).

{
  "compilerOptions": {
    "composite": true,
    "incremental": true, // Enable incremental builds
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "module": "commonjs",
    "target": "ES6"
  },
  "include": ["src"],
  "references": [
    { "path": "../other-project" }
  ]
}

// {
//   "compilerOptions": {
//     "target": "es2016",
//     "module": "commonjs",
//     "strict": true,
//     "esModuleInterop": true,
//     "noEmitOnError": true
//     "outDir": "./dist",
//     "rootDir": "./src",
//     "jsx": "react",

//   },
//   "include": ["src"],
//   "exclude": ["node_modules", "dist"]
// }

// structure
// [(dist(file.js))(src(file.ts))(index.html)(tsconfig.json)]
//in index.html put the script tag as type module and src ad ./dist/file.js

npm uninstall package-name -D
npm uninstall package-name
npm install ts-node --save-dev

npm i -d express
npm i express -d  // not valid
npm i express -D
npm i express --save-dev
npx tsc --init
 
 start 
tsc app.ts node app.js
ts-node app.ts
nodemon app.ts (server)
npm start

npm install @types/node --save-dev or npm install @types/node -d

npm install express
npm install @types/express --save-dev

npm i mongoose
npm i @types/mongoose -d



import express, { Request, Response } from 'express';
(req: Request, res: Response)

// models/User.ts
import mongoose, { Document, Schema } from 'mongoose';

export interface User extends Document {
  name: string;
  email: string;
}

const userSchema: Schema<User> = new Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
});

export default mongoose.model<User>('User', userSchema);

 "dependencies": {
    "cookie-parser": "^1.4.6",
    "ejs": "^3.1.10",
    "express": "^4.19.2",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.4.3",
    "nanoid": "^5.0.7",
    "nodemon": "^3.1.3",
    "shortid": "^2.2.16",
    "uuid": "^10.0.0"
  }

  {
  "name": "14-multer-typescript",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node ./dist/index.js",
    "dev": "nodemon ./src/index.ts",
    "build":"tsc --build"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@types/node": "^20.14.11",
    "express": "^4.19.2",
    "mongoose": "^8.5.1"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/mongoose": "^5.11.97"
  }
}


npm run build
npm run dev


import fs from "fs";

fs.readFile("./info.txt", "utf-8", (err: NodeJS.ErrnoException | null, data: string) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log(data);
});

app.get("/", (req: Request, res: Response) => {
  res.send("Hello From Express TS");
});

typescript -------------------------------------------------------------
tsc src/index.ts or tsc index.ts vs npx tsc src/index.ts
tsc is when i have typescript globally install
npx tsc when i have on my project

important 
when i have outDir and rootDir in ts.configue on then only use npx tsc not npx tsc index.ts 


steps
1)index.ts
2)npm init -y
3)tsc --init 
4)@types/node
5)npm i express
6)npm i -D @types/express
7)import express, { Request, Response } from "express"; like this

to run first transpile ts to js

8)npx tsc index.ts -> tsc index only one compile if index.ts all at once
when i have outDir and rootDir in ts.configue on then only use npx tsc not npx tsc index.ts 

remember to change "main" in package.json as index.js

{
  "compilerOptions": {
    "target": "ES2016",
    "module": "ES6",
    "strict": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "noEmitOnError": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "jsx": "react",
    "moduleResolution": "node"
  },
 "include": ["src"],
 "exclude": ["node_modules", "dist"]

}

now to how to watch continuos

your-project/
├── src/
│   ├── controllers/
│   │   └── userController.ts
│   ├── models/
│   │   └── user.ts
│   ├── routes/
│   │   └── userRoutes.ts
│   ├── services/
│   │   └── userService.ts
│   ├── utils/
│   │   └── logger.ts
│   ├── middlewares/
│   │   └── errorHandler.ts
│   ├── config/
│   │   └── database.ts
│   ├── index.ts
│   ├── app.ts
├── dist/
│   └── index.js
├── tests/
│   └── userController.test.ts
├── node_modules/
├── package.json
├── tsconfig.json
├── .eslintrc.json
├── .gitignore
├── README.md

->tsc -watch or tsc -w or npx tsc -w (if TypeScript is installed locally)
this compile when you change something in ts file

npm install ts-node --save-dev

tsc app.ts node app.js
ts-node app.ts
nodemon app.ts (server)
npm start


ts-node directly run index.ts but tsc index.ts then run node index.js extra steps

 "scripts": {
    "build": "tsc",
    "start": "node dist/index.js",
    "dev": "dev": "nodemon --watch \"src/**/*.ts\" --exec \"ts-node\" src/index.ts"
  },
  "dependencies": {
    "express": "^4.17.1"
  },
  "devDependencies": {
    "typescript": "^4.4.3",
    "ts-node": "^10.4.0",
    "nodemon": "^2.0.12"
  }

nodemon file
{
  "watch": ["src"],
  "ext": "ts",
  "exec": "ts-node src/index.ts"
}

===========================================================

"scripts": {
    "build": "tsc",
    "start": "node dist/index.js",
    "dev": "dev": "nodemon --watch \"src/**/*.ts\" --exec \"ts-node\" src/index.ts"
  },

or

  "scripts": {
    "start": "node ./dist/index.js",
     "build":"npx tsc"
    "dev": "nodemon ./src/index.ts" //this neeed ts-node
  },


or
  "scripts": {
    "dev": "ts-node-dev --respawn --transpile-only --files src/index.ts"
  }
npm i -D ts-node-dev



===========================================================================================
nodemon:

nodemon is a utility that monitors for changes in files in a Node.js application and automatically restarts the server when a file changes. It's particularly useful during development to avoid manually restarting the application each time you make changes.
--watch 'src/**/*.ts':

The --watch option specifies which files or directories nodemon should monitor for changes.
'src/**/*.ts' is a glob pattern that tells nodemon to watch all TypeScript files (.ts) within the src directory and its subdirectories. This means that if any TypeScript file within src changes, nodemon will restart the application.
Note: On Unix-based systems (Linux, macOS), single quotes (') are used around the glob pattern. On Windows, you may need to use double quotes (").

--exec 'ts-node':

The --exec option specifies the command that should be executed when nodemon detects a change.
'ts-node' is the command used to run TypeScript files directly. ts-node compiles TypeScript to JavaScript in memory and executes it.
src/index.ts:

This specifies the entry point of your application. nodemon will start your application using ts-node to run this TypeScript file.



Both "dev": "nodemon ./src/index.ts" and nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts are valid commands for using nodemon to run TypeScript files, but they serve different purposes and have different configurations. Let’s compare them in detail:

1. nodemon ./src/index.ts
What It Does:
Command: nodemon ./src/index.ts
Behavior: This command tells nodemon to run ./src/index.ts directly.
Characteristics:
Simple Execution: nodemon will execute ./src/index.ts and restart the application when changes are detected.
Requires ts-node: This command assumes that ts-node is configured as the default interpreter for TypeScript files in nodemon. If ts-node is not set up as a default, this command might not work correctly. You would need to specify ts-node explicitly if it's not configured globally or in nodemon.
Configuration:
Minimal Setup: This setup is simpler but may require additional configuration to ensure that TypeScript files are interpreted correctly.
2. nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts
What It Does:
Command: nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts
Behavior: This command runs ts-node to execute src/index.ts and tells nodemon to watch for changes in all .ts files within the src directory. When a change is detected, nodemon restarts the application.
Characteristics:
Explicit Execution Command: By specifying --exec 'ts-node', this command explicitly tells nodemon to use ts-node to run TypeScript files.
Fine-Grained Watching: The --watch option specifies a glob pattern to watch all TypeScript files (.ts) in the src directory, ensuring that changes to any TypeScript file trigger a restart.
Clear Configuration: This command is more explicit and ensures that ts-node is used to run TypeScript files, making it clear that TypeScript compilation is handled by ts-node.
Configuration:
Flexibility: This setup is more flexible and clear, especially in projects where ts-node is not the default interpreter. It provides better control over what files are watched and how they are executed.
Summary of Differences
Simplicity vs. Explicit Configuration:

nodemon ./src/index.ts is simpler and relies on default behavior, which may be less clear and less flexible.
nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts is more explicit and ensures that ts-node is used, with fine-grained control over which files trigger a restart.
File Watching:

nodemon ./src/index.ts may not explicitly configure which files are watched unless nodemon is configured to handle TypeScript files.
nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts clearly specifies that all TypeScript files in src should be watched for changes.
Configuration Needs:

The simpler command (nodemon ./src/index.ts) might require additional configuration or may not work correctly without ts-node configured properly.
The more explicit command (nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts) ensures that ts-node is used and provides clear file watching behavior.
In general, the more explicit configuration (nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/index.ts) is preferred for TypeScript projects to ensure that ts-node is used and that the appropriate files are watched for changes.
